package almost_Sorted;

import java.util.Scanner;


public class Solution {



	
	public static void main(String[] args) {
		
		

		
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		int[] a = new int[n];
		
		int[] pattern = new int[n];

		
		for (int t = 0; t<n; t++){
		
			
			a[t] = sc.nextInt();

		
		}
		
		
		
		for (int t = 0; t<n-1; t++){
			
			if (a[t]<a[t+1]) pattern[t] = 0;
			else pattern[t] = 1;
			
			System.out.print(pattern[t]);
		}
		
		pattern[n] = 0;
		
		
		
		boolean result = false;
		
		if (checkSort(a,n)) result = true;
			else if (checkSwapNear(a,pattern,n)) result = checkSort(a,n);
				else if (checkSwapMid(a,pattern,n)) result = checkSort(a,n);
					else if (checkSwapFar(a,pattern,n)) result = checkSort(a,n);
						else if (checkReverse(a,pattern,n)) result = checkSort(a,n);
		
		
		
	}
	
	
	public static boolean checkSwapNear(int[] a, int[] pattern, int n){
		boolean check = false;
		int count = 0;
		int pos = 0;
			for(int i=0; i<n; i++)
				if (pattern[i]==1) {count++; pos=i;}
			
			if(count==1) {
				int temp = a[pos]; 
				a[pos] = a[pos+1];
				a[pos+1] = temp;
				
				
				check = true;
			}
		
		
		return check;
	}
	
	
	public static boolean checkSwapMid(int[] a, int[] pattern, int n){
		boolean check = false;
		int count = 0;
		int pos = 0;
			for(int i=0; i<n; i++)
				if (pattern[i]==1) {count++; pos=i;}
			
			if(count==1) {
				int temp = a[pos]; 
				a[pos] = a[pos+1];
				a[pos+1] = temp;
				
				
				check = true;
			}
		
		
		return check;
	}
	
	
	
	
	
	public static boolean checkSort(int[] a, int n){
		
		boolean sorted = true;
		for (int i = 0 ; i<n-1; i++)
		 	if (a[i]>a[i+1]) sorted = false;
		
		return sorted;
			
	}
	
		

}
