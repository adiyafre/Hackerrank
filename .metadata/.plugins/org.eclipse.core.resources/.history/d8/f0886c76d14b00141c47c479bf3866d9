package almost_Sorted;

import java.util.Scanner;


public class Solution {



	
	public static void main(String[] args) {
		
		

		
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		int[] a = new int[n];

		
		for (int t = 0; t<n; t++){
		
			
			a[t] = sc.nextInt();


			
		
		}
		
		int max = 0; 
		int start = -1;
		int end = 0;
		boolean fail = true;
		boolean result =true;
		int countSwap = 0;
		int countReverse = 0;
		int endIndexReverse = -1;
		int endIndexSwap = -1;
		
		for (int i = 0; i<n-1&&fail; i++){
			
			if (a[i]>a[i+1]){
				
				endIndexReverse=checkReverse(i+1,n,a);
				endIndexSwap=checkSwap(i+1,n,a);
				
				
				if (endIndexSwap>-1) countSwap++;
				if (endIndexReverse>-1) countReverse++;
				
				
			}
			
			
			if(countSwap>2)fail=false;
			if(countReverse>1)fail=false;
			
		}	
			
		
		
		if (fail){
			
			if (countSwap>0) { result = swap_and_check();}
			else if (countReverse>0){ result = reverse_and_check();}
			
			
			
		} System.out.println("no");
		
		
		
	}
	
		public static boolean swap_and_check(int pos1, int pos2){
			return false;
		
		}
	
		public static boolean reverse_and_check(int start, int end, int[] a){
			return false;
		
		}
		
	
		public static int checkReverse(int idx, int n, int[] a){
			
			boolean end = true;
			boolean rev = false;
			int i = 2;
			int start=idx;
			
			
			if(idx+2<n)
				if(a[idx+1]>a[idx+2])
				
					while((idx+1<n)&&end){
				
						
					}
				
			
			return -1;
			
		}
		
		public static int checkSwap(int idx){
			return -1;
			
		}
		

}
